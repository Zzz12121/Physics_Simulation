[33mtag v1.0[m
Tagger: Zeki <zeki941212@gmail.com>
Date:   Fri May 23 22:19:05 2025 +0800

First release

[33mcommit e48a896131dba95607daa693e541a49a4aec0f33[m[33m ([m[1;33mtag: [m[1;33mv1.0[m[33m)[m
Author: Zeki <zeki941212@gmail.com>
Date:   Fri May 23 22:12:39 2025 +0800

    Initial commit: add new thing today

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..1a45a21[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m# IDEs[m
[32m+[m[32m.idea[m
[32m+[m[32m.vscode[m
[32m+[m
[32m+[m[32m# Linked files[m
[32m+[m[32m# But keep allegro for convenience[m
[32m+[m[32m*.dll[m
[32m+[m[32m!allegro_monolith-5.2.dll[m
[32m+[m[32mbuild[m
[32m+[m
[32m+[m[32m# MacOS[m
[32m+[m[32m.DS_Store[m
[32m+[m
[32m+[m[32m# Others[m
[32m+[m[32mlog.txt[m
\ No newline at end of file[m
[1mdiff --git a/Bullet/Bullet.cpp b/Bullet/Bullet.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..be6b35f[m
[1m--- /dev/null[m
[1m+++ b/Bullet/Bullet.cpp[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32m#include "Bullet.hpp"[m
[32m+[m[32m#include "Enemy/Enemy.hpp"[m
[32m+[m[32m#include "Engine/Collider.hpp"[m
[32m+[m[32m#include "Engine/GameEngine.hpp"[m
[32m+[m[32m#include "Engine/Group.hpp"[m
[32m+[m[32m#include "Engine/IObject.hpp"[m
[32m+[m[32m#include "Engine/IScene.hpp"[m
[32m+[m[32m#include "Engine/Point.hpp"[m
[32m+[m[32m#include "Engine/Sprite.hpp"[m
[32m+[m[32m#include "Scene/PlayScene.hpp"[m
[32m+[m
[32m+[m[32mPlayScene *Bullet::getPlayScene() {[m
[32m+[m[32m    return dynamic_cast<PlayScene *>(Engine::GameEngine::GetInstance().GetActiveScene());[m
[32m+[m[32m}[m
[32m+[m[32mvoid Bullet::OnExplode(Enemy *enemy) {[m
[32m+[m[32m}[m
[32m+[m[32mBullet::Bullet(std::string img, float speed, float damage, Engine::Point position, Engine::Point forwardDirection, float rotation, Turret *parent) : Sprite(img, position.x, position.y), speed(speed), damage(damage), parent(parent) {[m
[32m+[m[32m    Velocity = forwardDirection.Normalize() * speed;[m
[32m+[m[32m    Rotation = rotation;[m
[32m+[m[32m    CollisionRadius = 4;[m
[32m+[m[32m}[m
[32m+[m[32mvoid Bullet::Update(float deltaTime) {[m
[32m+[m[32m    Sprite::Update(deltaTime);[m
[32m+[m[32m    PlayScene *scene = getPlayScene();[m
[32m+[m[32m    // Can be improved by Spatial Hash, Quad Tree, ...[m
[32m+[m[32m    // However simply loop through all enemies is enough for this program.[m
[32m+[m[32m    for (auto &it : scene->EnemyGroup->GetObjects()) {[m
[32m+[m[32m        Enemy *enemy = dynamic_cast<Enemy *>(it);[m
[32m+[m[32m        if (!enemy->Visible)[m
[32m+[m[32m            continue;[m
[32m+[m[32m        if (Engine::Collider::IsCircleOverlap(Position, CollisionRadius, enemy->Position, enemy->CollisionRadius)) {[m
[32m+[m[32m            OnExplode(enemy);[m
[32m+[m[32m            enemy->Hit(damage);[m
[32m+[m[32m            getPlayScene()->BulletGroup->RemoveObject(objectIterator);[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    // Check if out of boundary.[m
[32m+[m[32m    if (!Engine::Collider::IsRectOverlap(Position - Size / 2, Position + Size / 2, Engine::Point(0, 0), PlayScene::GetClientSize()))[m
[32m+[m[32m        getPlayScene()->BulletGroup->RemoveObject(objectIterator);[m
[32m+[m[32m}[m
[1mdiff --git a/Bullet/Bullet.hpp b/Bullet/Bullet.hpp[m
[1mnew file mode 100644[m
[1mindex 0000000..b21f2a4[m
[1m--- /dev/null[m
[1m+++ b/Bullet/Bullet.hpp[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m#ifndef BULLET_HPP[m
[32m+[m[32m#define BULLET_HPP[m
[32m+[m[32m#include <string>[m
[32m+[m
[32m+[m[32m#include "Engine/Sprite.hpp"[m
[32m+[m
[32m+[m[32mclass Enemy;[m
[32m+[m[32mclass PlayScene;[m
[32m+[m[32mclass Turret;[m
[32m+[m[32mnamespace Engine {[m
[32m+[m[32m    struct Point;[m
[32m+[m[32m}   // namespace Engine[m
[32m+[m
[32m+[m[32mclass Bullet : public Engine::Sprite {[m
[32m+[m[32mprotected:[m
[32m+[m[32m    float speed;[m
[32m+[m[32m    float damage;[m
[32m+[m[32m    Turret *parent;[m
[32m+[m[32m    PlayScene *getPlayScene();[m
[32m+[m[32m    virtual void OnExplode(Enemy *enemy);[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    Enemy *Target = nullptr;[m
[32m+[m[32m    explicit Bullet(std::string img, float speed, float damage, Engine::Point position, Engine::Point forwardDirection, float rotation, Turret *parent);[m
[32m+[m[32m    void Update(float deltaTime) override;[m
[32m+[m[32m};[m
[32m+[m[32m#endif   // BULLET_HPP[m
[1mdiff --git a/Bullet/Bullet2.cpp b/Bullet/Bullet2.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..c251163[m
[1m--- /dev/null[m
[1m+++ b/Bullet/Bullet2.cpp[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32m#include "Bullet2.hpp"[m
[32m+[m[32m#include "Enemy/Enemy.hpp"[m
[32m+[m[32m#include "Engine/Collider.hpp"[m
[32m+[m[32m#include "Engine/GameEngine.hpp"[m
[32m+[m[32m#include "Engine/Group.hpp"[m
[32m+[m[32m#include "Engine/IObject.hpp"[m
[32m+[m[32m#include "Engine/IScene.hpp"[m
[32m+[m[32m#include "Engine/Point.hpp"[m
[32m+[m[32m#include "Engine/Sprite.hpp"[m
[32m+[m[32m#include "Scene/PlayScene.hpp"[m
[32m+[m
[32m+[m[32mPlayScene *Bullet2::getPlayScene() {[m
[32m+[m[32m    return dynamic_cast<PlayScene *>(Engine::GameEngine::GetInstance().GetActiveScene());[m
[32m+[m[32m}[m
[32m+[m[32mvoid Bullet2::OnExplode(Enemy *enemy) {[m
[32m+[m[32m}[m
[32m+[m[32mBullet2::Bullet2(std::string img, float speed, float damage, Engine::Point position, Engine::Point forwardDirection, float rotation, Turret *parent) : Sprite(img, position.x, position.y), speed(speed), damage(damage), parent(parent) {[m
[32m+[m[32m    Velocity = forwardDirection.Normalize() * speed;[m
[32m+[m[32m    Rotation = rotation;[m
[32m+[m[32m    CollisionRadius = 10;[m
[32m+[m[32m}[m
[32m+[m[32mvoid Bullet2::Update(float deltaTime) {[m
[32m+[m[32m    Sprite::Update(deltaTime);[m
[32m+[m[32m    PlayScene *scene = getPlayScene();[m
[32m+[m[32m    // Can be improved by Spatial Hash, Quad Tree, ...[m
[32m+[m[32m    // However simply loop through all enemies is enough for this program.[m
[32m+[m[32m    for (auto &it : scene->EnemyGroup->GetObjects()) {[m
[32m+[m[32m        Enemy *enemy = dynamic_cast<Enemy *>(it);[m
[32m+[m[32m        if (!enemy->Visible)[m
[32m+[m[32m            continue;[m
[32m+[m[32m        if (Engine::Collider::IsCircleOverlap(Position, CollisionRadius, enemy->Position, enemy->CollisionRadius)) {[m
[32m+[m[32m            OnExplode(enemy);[m
[32m+[m[32m            enemy->Hit(damage);[m
[32m+[m[32m            //getPlayScene()->BulletGroup->RemoveObject(objectIterator);[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    // Check if out of boundary.[m
[32m+[m[32m    if (!Engine::Collider::IsRectOverlap(Position - Size / 2, Position + Size / 2, Engine::Point(0, 0), PlayScene::GetClientSize()))[m
[32m+[m[32m        getPlayScene()->BulletGroup->RemoveObject(objectIterator);[m
[32m+[m[32m}[m
[1mdiff --git a/Bullet/Bullet2.hpp b/Bullet/Bullet2.hpp[m
[1mnew file mode 100644[m
[1mindex 0000000..0a9de03[m
[1m--- /dev/null[m
[1m+++ b/Bullet/Bullet2.hpp[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m#ifndef BULLET2_HPP[m
[32m+[m[32m#define BULLET2_HPP[m
[32m+[m[32m#include <string>[m
[32m+[m
[32m+[m[32m#include "Engine/Sprite.hpp"[m
[32m+[m
[32m+[m[32mclass Enemy;[m
[32m+[m[32mclass PlayScene;[m
[32m+[m[32mclass Turret;[m
[32m+[m[32mnamespace Engine {[m
[32m+[m[32m    struct Point;[m
[32m+[m[32m}   // namespace Engine[m
[32m+[m
[32m+[m[32mclass Bullet2 : public Engine::Sprite {[m
[32m+[m[32mprotected:[m
[32m+[m[32m    float speed;[m
[32m+[m[32m    float damage;[m
[32m+[m[32m    Turret *parent;[m
[32m+[m[32m    PlayScene *getPlayScene();[m
[32